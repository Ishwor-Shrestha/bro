#!/bin/sh

function bro_init {
  if [ "$WORKSTATION" = "" ]; then
    export WORKSTATION=$HOME/projects
  fi

  if [ "$BRO_STATION" = "" ]; then
    export BRO_STATION=$HOME/.bro
  fi

  BRO_TEMPLATES_DIR="$BRO_STATION/templates"

  mkdir -p `bro_expand $WORKSTATION`
  mkdir -p `bro_expand $BRO_STATION`
  mkdir -p `bro_expand $BRO_TEMPLATES_DIR` 
}

function bro_expand {
  echo `sh -c "echo $1"`
}

function bro_error {
  printf "Yo! $1.\n"
}

function bro_usage {
  printf "bro <command> <mission>"
}

# launch a project
function bro_start {
  if [ "$1" == "" ] ; then
    bro_error "specify the project name to start."
    return 1
  fi

  project=$1
  project_reference=`bro_expand "$BRO_STATION/projects/$project"`

  # check if the project already exists
  if [ ! -e $project_reference ]; then
    bro_error "the project \"$1\" does not exist.\n Create it with $ bro create $1"
    return 1
  fi

  source $project_reference
}

# creates a project
function bro_create {
  if [ "$1" == "" ] ; then
    bro_error "specify the project name to create"
    return 1
  fi

  project=$1

  project_path=`bro_expand "$WORKSTATION/$project"`
  project_reference=`bro_expand "$BRO_STATION/projects/$project"`

  # check if the project already exists
  if [ -e $project_reference ] ; then
    bro_error "the project \"$1\" already exists"
    return 1
  fi

  # set bro template
  if [ "$2" = "" ] ; then
    template='default'
  else
    if [ ! -e $BRO_STATION/templates/$2 ] ; then
      bro_error "the bro template \"$2\" does not exist. Please create one at $BRO_STATION/templates/"
      return
    fi
    template=$2
  fi

  # if this project is fresh
  ## create a script at BRO_STATION which cds to the project directory
  cmd="cd $WORKSTATION/$project"
  echo "#!/bin/sh" > $project_reference
  echo $cmd >> $project_reference
  echo "source .bro" >> $project_reference
  chmod +x $project_reference

  ## create project directory at workstation
  mkdir -p $project_path
  
  ## copy bro template to project directory
  cp $BRO_STATION/templates/$template $project_path/.bro
  chmod +x $project_path/.bro
  ## launch the project
  source $project_reference
}

# remove a project
function bro_remove {
  if [ "$1" == "" ] ; then
    bro_error "specify the project name to remove"
    return 1
  fi

  project=$1
  project_path=`bro_expand "$WORKSTATION/$project"`
  project_reference=`bro_expand "$BRO_STATION/projects/$project"`

  # check if the project already exists
  if [ ! -e $project_reference ]; then
    bro_error "the project $1 does not exist."
    return 1
  fi

  echo "Yo! are sure you wanna remove $project?"
  echo "This will remove the project directory as well."
  read -p "Do you still wish to continue? (y/n):" confirm

  if [ $confirm = "" ] || [ $confirm = "y" ] || [ $confirm = "Y" ]; then
    rm $project_reference
    rm -rf $project_path
    
    echo "Successfully removed project $project."
    return 0
  else
    echo "Aborting operation for good !!!"
  fi
}

bro_init

function bro {
  cmd=$1
  project_name=$2
  
  case $1 in
    --help|-h)
      bro_usage
      ;; 
    start)
      bro_start $2
      ;;
    create)
      shift
      bro_create $@
      ;;
    remove)
      bro_remove $2
      ;;
    *)
      bro_usage
  esac
}
