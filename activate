#!/bin/sh
# 2.2.1

bro_expand () {
  echo `sh -c "echo $1"`
}

bro_error () {
  printf "Aye! $1.\n"
}

bro_usage () {
  echo "Project management: bro <subcommand>"
  echo "Available subcommands are:"
  echo "  create     Create a new project."
  echo "  list       List available projects to work on."
  echo "  remove     Delete an existing project."
  echo "Try 'bro <subcommand>' for details."
  echo "------------------------------------------------"
  echo "Task execution: bro [project] <task> [params]"
  echo "  project    Project name. (Not required inside project directory.)"
  echo "  task       Task at .brofile."
  echo "  params     Parameters for the task."
}


bro_task_usage () {
  echo "Usage: bro [project] <task> [params]"
  echo "  project    Project name. (Not required inside project directory.)"
  echo "  task       Task at .brofile."
  echo "  params     Parameters for the task."
}


bro_create_usage () {
  echo "Usage: bro create [-t template -p path -r repo] project"
  echo "  project     Name of the project to be created."
  echo "  template    Name of one of the templates at templates/ directory."
  echo "  path        Absolute/relative path where the project directory is to be created."
  echo "  repo        URL of existing git repository."
}


bro_remove_usage () {
  echo "Usage: bro remove <project>"
  echo "  project     Name of the project to be removed."
}


# setup a project
# like installing dependencies, git, preparing project structure etc
bro_setup () {
  project=$1
  project_reference=`bro_expand "$BRO_STATION/projects/$project"`

  # check if the project exists
  if [ ! -e "$project_reference" ]; then
    bro_error "the project \"$project\" does not exist.\n Create it with $ bro create $1"
    return 1
  fi

  project_path=`bro_expand $(sed '1p' $project_reference)`
  cd $project_path
  source "$project_path/.brofile" $project setup
}


bro_remote_task () {
  # check for proper number of arguments
  # must have at least two arguments
  if [ "$#" == "1" ] ; then
    bro_task_usage
    return 1
  fi

  # get project name
  project=$1
  project_reference=`bro_expand "$BRO_STATION/projects/$project"`

  # check if the project exists
  if [ ! -e "$project_reference" ]; then
    bro_error "the project \"$1\" does not exist.\n Create it with $ bro create $1"
    return 1
  fi

  project_path=`bro_expand $(sed '1p' $project_reference)`
  cd $project_path

  source "$project_path/.brofile" $@
}

bro_local_task () {
  project=$(basename "`pwd`")
  source ./.brofile $project $@
}

# execute command at .brofile
bro_task () {
  function structure {
    tmux new -d -s $1
  }

  function window {
    tmux new-window -n $1
  }

  function run {
    tmux send "$@" ENTER
  }

  function vsplit {
    tmux split-window -h -b
  }

  function hsplit {
    tmux split-window -b
  }


  function pane {
    case $1 in
      up)
        tmux select-pane -U
        ;;
      right)
        tmux select-pane -R
        ;;
      down)
        tmux select-pane -D
        ;;
      left)
        tmux select-pane -L
        ;;
    esac
  }

  function focus {
    if [[ $# == 2 ]]; then
      tmux select-window -t $1
      tmux select-pane -t $2
    elif [[ $# == 1 ]]; then
      tmux select-window -t $1
    fi
  }

  function connect {
    tmux kill-window -t 0
    tmux a -t $1
  }

  # distinguish remote and local task
  possible_project=$1
  project_reference=`bro_expand "$BRO_STATION/projects/$possible_project"`

  if [[ $# == 1 ]] && [[ -f "$project_reference" ]]; then
    bro_remote_task $possible_project default
  elif [[ $# == 1 ]] && [[ ! -f "`pwd`/.brofile" ]]; then
    bro_usage
  elif [[ ! -e "$project_reference" ]] && [[ -f "`pwd`/.brofile" ]]; then
    bro_local_task $@
  else
    bro_remote_task $@
  fi

  unset -f structure
  unset -f window
  unset -f run
  unset -f vsplit
  unset -f hsplit
  unset -f pane
  unset -f focus
  unset -f connect
}


# creates a project
bro_create () {
  local OPTIND template path opt project_path project_reference template_path

  while getopts :t:p: opt; do
    case  $opt in
      t) template=$OPTARG;;
      p) path=$OPTARG;;
      *) echo "Invalid option: -" $OPTARG;;
    esac
  done

  ## get project name
  shift $(($OPTIND-1))
  project=$@

  if [ "$project" = "" ] ; then
    bro_error "you missed the project name"
    bro_create_usage
    return 1
  fi

  ## set project path
  if [ "$path" = "" ] ; then
    project_path=`bro_expand "$WORKSTATION/$project"`
  else
    if [ "$(echo $path | sed -n "/[~\/]/p")" = "" ] ; then
      mkdir -p `bro_expand "$WORKSTATION/$path"`
      project_path=`bro_expand "$WORKSTATION/$path/$project"`
    else
      project_path=`bro_expand "$path/$project"`
    fi
  fi
  ## set project reference path
  project_reference=`bro_expand "~/.bro/projects/$project"`

  ### check if the project already exists
  if [ -e $project_reference ] ; then
    bro_error "the project \"$project\" already exists"
    return 1
  fi

  ## set template
  case $template in
    "")
      template_path=`bro_expand "~/.bro/templates/default"`
      ;;
    # templates/name or name
    [0-9a-zA-Z]*)
      template_path=`bro_expand "$WORKSTATION/$template"`
      ;;
    *)
	    echo 3
      template_path=$template
      ;;
  esac

  ## create project directory at specified path
  case $template_path in
    # http or git
    git@*|http:*|https:*)
      git clone $repo $project_path

      if [ ! -e $project_path ] ; then
        bro_error "it seems template at \"$template_path\" does not exist.\nPlease check the url or the internet connection."
        return
      fi
      ;;
    # local path
    *)
      if [ ! -e $template_path ] ; then
        bro_error "the bro template \"$template\" does not exist. Please create one at $WORKSTATION"
        return
      fi

      mkdir -p $project_path

      ## copy files from template to project directory
      cp -a $template_path/. $project_path/

      if [ ! -f $project_path/.brotasks ] ; then
      	chmod +x $project_path/.brotasks
      else
	chmod +x $project_path/.brotasks
      fi
      ;;
  esac


  ## create project reference file
  touch $project_reference
  echo "$project_path" > $project_reference

  ## setup project
  bro_setup $project
}

# remove a project
bro_remove () {
  if [ "$1" == "" ] ; then
    bro_remove_usage
    return 1
  fi

  project=$1
  project_reference=`bro_expand "$BRO_STATION/projects/$project"`

  # check if the project already exists
  if [ ! -e "$project_reference" ]; then
    bro_error "the project \"$project\" does not exist"
    return 1
  fi

  rm -f $project_reference

  # echo "Yo! are sure you wanna remove $project?"
  # echo "This will remove the project directory as well."
  # read -p "Do you still wish to continue? (Y/n):" confirm

  # if [ "$confirm" = "" ] || [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
  #   rm -rf $project_path

  #   echo "Successfully removed project $project."
  #   return 0
  # else
  #   echo "Aborting operation for good !!!"
  # fi
}


# list available projects
bro_list () {
  echo `ls $BRO_STATION/projects/`
}


bro () {
  if [ "$#" == "0" ] ; then
    bro_usage
    return 1
  fi

  cmd=$1
  project=$2

  # local OPTIND
  case $cmd in
    create)
      shift
      bro_create $@
      ;;
    remove)
      bro_remove $project
      ;;
    list)
      bro_list
      ;;
    *)
      bro_task $@
      ;;
  esac
}

# autocomplete
_bro () {
  local cur prev

  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}

  projects=$(ls $BRO_STATION/projects)

  if (( $COMP_CWORD <= 1 )); then
    if [ -e "./.brofile" ]; then
      local_commands="$(sed -n 's_\s*\(\w\))_\1_p' './.brofile')"
      COMPREPLY=( $(compgen -W '$local_commands create remove list $projects' -- $cur) )
    else
      COMPREPLY=( $(compgen -W 'create remove list $projects' -- $cur) )
    fi
    return 0
  fi

  if [[ "$prev" == "create" ]]; then
    COMPREPLY=( $(compgen -W '-r -p -t' -- $cur) )
    return 0
  fi

  if [[ "$prev" == "remove" ]]; then
    COMPREPLY=( $(compgen -W '$projects' -- $cur) )
    return 0
  fi

  if [[ "$prev" == "list" ]]; then
    return 0
  fi

  if (( $COMP_CWORD == 2 )); then
    project_reference=`bro_expand "$BRO_STATION/projects/$prev"`
    if [ -e "$project_reference" ]; then
      project_path=`bro_expand $(sed '1p' $project_reference)`
      brofile_path=$project_path/.brofile
      COMPREPLY=( $(compgen -W "$(sed -n 's_\s*\(\w\))_\1_p' $brofile_path)" -- $cur) )
    fi
  fi

}

complete -F _bro bro
